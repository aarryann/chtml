const path = require("path");
const webpack = require("webpack");
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
//const ESLintPlugin = require('eslint-webpack-plugin');
const MiniCssExtractPlugin = require("mini-css-extract-plugin")


const listOfComponents = [
  {"handle": "main",  "js": "/lib/index.js"              , "html": "/index.html"},
  {"handle": "feeds", "js": "/lib/feeds/feeds-alpine.js" , "html": "/feeds/index.html"},
  {"handle": "about", "js": "/lib/about/index.js"        , "html": "/about/index.html"},
  {"handle": "tailwind", "css": "/src/main.css"},
]

const entry = listOfComponents.reduce((entries, item) => {
  if(item.js)
	  entries[item.handle] = item.js;
  else if (item.css)
    entries[item.handle] = item.css;
	return entries;
}, {});

const htmlGenerators = listOfComponents.reduce((entries, item) => {
  if(item.html){
    entries.push(new HtmlWebpackPlugin({
      inject: true,
      chunks: [item.handle],
      //filename: path.join(__dirname, 'public', item.html),
      //template: path.join(__dirname, 'src', item.html),
      filename: `./${item.html}`,
      template: `./src/pages/${item.html}`,
    }));
  }
	return entries;
}, []);


module.exports = {
  optimization: {
    runtimeChunk: 'single',
    splitChunks: {
      chunks: 'all',
      maxInitialRequests: Infinity,
      minSize: 0,
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name(module) {
            // get the name. E.g. node_modules/packageName/not/this/part.js
            // or node_modules/packageName
            const packageName = module.context.match(/[\\/]node_modules[\\/](.*?)([\\/]|$)/)[1];

            // npm package names are URL-safe, but some servers don't like @ symbols
            return `npm.${packageName.replace('@', '')}`;
          },
        },
      },
    },   
  }, 

};